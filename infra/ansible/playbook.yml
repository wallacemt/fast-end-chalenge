---
- hosts: all
  become: true
  roles:
    - docker
  tasks:
    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - name: Wait for Docker daemon to be ready
      shell: docker info
      register: docker_info
      until: docker_info.rc == 0
      retries: 10
      delay: 3
      ignore_errors: yes

# Single play for swarm setup to avoid delegation issues
- hosts: all
  become: true
  serial: 1
  tasks:
    # Manager tasks
    - name: Check if swarm is already initialized
      shell: docker info | grep "Swarm:" | awk '{print $2}'
      register: swarm_status
      ignore_errors: yes
      when: inventory_hostname in groups['managers']

    - name: Initialize Docker Swarm if not active
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ ansible_host }}"
      register: swarm_init
      when:
        - inventory_hostname in groups['managers']
        - swarm_status.stdout != "active"

    - name: Get join token for workers
      shell: docker swarm join-token -q worker
      register: worker_token
      when: inventory_hostname in groups['managers']

    - name: Set manager facts globally
      set_fact:
        swarm_worker_token: "{{ hostvars[groups['managers'][0]]['worker_token']['stdout'] }}"
        swarm_manager_ip: "{{ hostvars[groups['managers'][0]]['ansible_host'] }}"
      when: inventory_hostname in groups['workers']

    - name: Debug token info for workers
      debug:
        msg:
          - "Manager IP: {{ swarm_manager_ip | default('NOT_SET') }}"
          - "Worker Token: {{ swarm_worker_token | default('NOT_SET') }}"
          - "Current host: {{ inventory_hostname }}"
          - "Is worker: {{ inventory_hostname in groups['workers'] }}"
      when: inventory_hostname in groups['workers']

    - name: Check current swarm status on workers
      shell: docker info | grep "Swarm:" | awk '{print $2}'
      register: current_swarm_status
      ignore_errors: yes
      when: inventory_hostname in groups['workers']

    - name: Join swarm as worker
      community.docker.docker_swarm:
        state: join
        join_token: "{{ swarm_worker_token }}"
        remote_addrs:
          - "{{ swarm_manager_ip }}:2377"
      register: join_result
      ignore_errors: yes
      when:
        - inventory_hostname in groups['workers']
        - swarm_worker_token is defined
        - swarm_worker_token != ""
        - swarm_manager_ip is defined
        - swarm_manager_ip != ""
        - current_swarm_status.stdout != "active"

    - name: Display join result for workers
      debug:
        msg:
          - "Current swarm status: {{ current_swarm_status.stdout | default('unknown') }}"
          - "Join attempted: {{ join_result.changed | default(false) }}"
          - "Join error: {{ join_result.msg | default('No error or not attempted') }}"
      when: inventory_hostname in groups['workers']

# Final verification and deployment
- hosts: managers
  become: true
  tasks:
    - name: Wait for workers to join
      pause:
        seconds: 10

    - name: Verify swarm cluster
      shell: docker node ls
      register: swarm_nodes

    - name: Display swarm cluster status
      debug:
        msg: "{{ swarm_nodes.stdout_lines }}"

    - name: Deploy application stack
      include_role:
        name: deploy_stack
