name: fast-end-cd

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Ambiente de deployment"
        required: true
        options:
          - prod
      imageTag:
        required: true
        description: "Deployment image tag"
        default: "latest"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Instala Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init

      # Create SSH public key file from secret
      - name: Setup SSH public key
        run: |
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > /tmp/id_rsa.pub
          sudo chmod 644 /tmp/id_rsa.pub

     # Import existing resources to avoid duplicates
      - name: Import existing resources
        working-directory: infra/terraform
        run: |
          chmod +x import_existing.sh
          ./import_existing.sh || echo "Some resources may not exist yet - continuing..."

      # Check if there are changes to apply
      - name: Check Terraform changes
        id: tf-plan
        working-directory: infra/terraform
        run: |
          terraform plan -detailed-exitcode -var="key_name=deployer" -var="public_key_path=/tmp/id_rsa.pub" -out=tfplan
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      # Apply Terraform only if there are changes
      - name: Terraform Apply
        if: steps.tf-plan.outputs.exit_code == '2'
        working-directory: infra/terraform
        run: |
          echo "Changes detected, applying Terraform..."
          terraform apply -auto-approve tfplan

      # Show message if no changes
      - name: No changes needed
        if: steps.tf-plan.outputs.exit_code == '0'
        run: |
          echo "âœ… No changes detected. All infrastructure is up to date!"
          echo "ðŸŽ¯ Reusing existing EC2 instances, Security Group, and Key Pair"

      # Recupera IPs dos nodes
      - name: Get Terraform outputs
        id: tf-out
        working-directory: infra/terraform
        run: |
          terraform output -json > tf.json
          cat tf.json
          echo "MANAGER_IP=$(jq -r '.swarm_public_ips.value[0]' tf.json)" >> $GITHUB_ENV
          echo "WORKER1_IP=$(jq -r '.swarm_public_ips.value[1]' tf.json)" >> $GITHUB_ENV
          echo "WORKER2_IP=$(jq -r '.swarm_public_ips.value[2]' tf.json)" >> $GITHUB_ENV

      - name: Validate IPs
        run: |
          if [ -z "$MANAGER_IP" ] || [ -z "$WORKER1_IP" ] || [ -z "$WORKER2_IP" ]; then
            echo "Error: Failed to extract IPs from Terraform output"
            exit 1
          fi
          echo "Manager IP: $MANAGER_IP"
          echo "Worker IPs: $WORKER1_IP, $WORKER2_IP"
      # Instala Ansible
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible python3-boto3
          ansible-galaxy collection install community.docker

      # Prepara inventÃ¡rio dinÃ¢mico
      - name: Generate Ansible inventory
        run: |
          echo "[managers]" > infra/ansible/inventory.ini
          echo "manager ansible_host=${{ env.MANAGER_IP }} ansible_user=ubuntu" >> infra/ansible/inventory.ini
          echo "[workers]" >> infra/ansible/inventory.ini
          echo "worker1 ansible_host=${{ env.WORKER1_IP }} ansible_user=ubuntu" >> infra/ansible/inventory.ini
          echo "worker2 ansible_host=${{ env.WORKER2_IP }} ansible_user=ubuntu" >> infra/ansible/inventory.ini

      # Prepara chave SSH para conectar nas EC2
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.MANAGER_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ env.WORKER1_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ env.WORKER2_IP }} >> ~/.ssh/known_hosts

      # Roda Ansible playbook
      - name: Run Ansible
        working-directory: infra/ansible
        run: |
          ansible-playbook -i inventory.ini playbook.yml --private-key ~/.ssh/deploy_key --ssh-common-args='-o StrictHostKeyChecking=no'
